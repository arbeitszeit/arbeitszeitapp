"""Remove email and password fields from member, company, accountant

Revision ID: bc1b2a684dfb
Revises: ed5e327140bf
Create Date: 2022-06-26 11:29:07.038153

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bc1b2a684dfb'
down_revision = 'ed5e327140bf'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    #op.drop_constraint('accountant_email_key', 'accountant', type_='unique')
    #op.drop_column('accountant', 'email')
    #op.drop_column('accountant', 'password')
    #op.drop_constraint('company_email_key', 'company', type_='unique')
    #op.drop_column('company', 'email')
    #op.drop_column('company', 'password')
    #op.drop_constraint('member_email_key', 'member', type_='unique')
    #op.drop_column('member', 'email')
    #op.drop_column('member', 'password')
    
    naming_convention = {
    "fk":
    "%(table_name)s_%(column_0_name)s__key",
    }
    
    with op.batch_alter_table('accountant', naming_convention=naming_convention) as batch_op:
        # todo batch_op.drop_constraint('accountant_email_key', type_='unique')
        batch_op.drop_column('email')
        batch_op.drop_column('password')
    
    with op.batch_alter_table('company', naming_convention=naming_convention) as batch_op:
        # todo batch_op.drop_constraint('company_email_key', type_='unique')
        batch_op.drop_column('email')
        batch_op.drop_column('password')
    
    with op.batch_alter_table('member', naming_convention=naming_convention) as batch_op:
        # todo batch_op.drop_constraint('member_email_key', type_='unique')
        batch_op.drop_column('email')
        batch_op.drop_column('password')	
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('member', sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('member', sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.create_unique_constraint('member_email_key', 'member', ['email'])
    op.add_column('company', sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('company', sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.create_unique_constraint('company_email_key', 'company', ['email'])
    op.add_column('accountant', sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('accountant', sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.create_unique_constraint('accountant_email_key', 'accountant', ['email'])
    # ### end Alembic commands ###

    migration = DowngradeMigration(connection=op.get_bind())
    migration.downgrade()

    with op.batch_alter_table('member') as batch:
        batch.alter_column('email', nullable=False)
        batch.alter_column('password', nullable=False)
    with op.batch_alter_table('company') as batch:
        batch.alter_column('email', nullable=False)
        batch.alter_column('password', nullable=False)
    with op.batch_alter_table('accountant') as batch:
        batch.alter_column('email', nullable=False)
        batch.alter_column('password', nullable=False)


class DowngradeMigration:
    members = sa.Table(
        "member",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("email", sa.String()),
        sa.Column("password", sa.String()),
        sa.Column("user_id", sa.String()),
    )
    companies = sa.Table(
        "company",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("email", sa.String()),
        sa.Column("password", sa.String()),
        sa.Column("user_id", sa.String()),
    )
    accountants = sa.Table(
        "accountant",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("email", sa.String()),
        sa.Column("password", sa.String()),
        sa.Column("user_id", sa.String()),
    )
    users = sa.Table(
        "user",
        sa.MetaData(),
        sa.Column("id", sa.String()),
        sa.Column("email", sa.String()),
        sa.Column("password", sa.String()),
    )

    def __init__(self, connection):
        self.connection = connection

    def downgrade(self):
        statement = sa.select([self.users.c.id, self.users.c.email, self.users.c.password])
        results = self.connection.execute(statement).fetchall()
        for user_id, email, password in results:
            self._set_email_and_password_from_user(
                table=self.members,
                email=email,
                password=password,
                user_id=user_id
            )
            self._set_email_and_password_from_user(
                table=self.companies,
                email=email,
                password=password,
                user_id=user_id
            )
            self._set_email_and_password_from_user(
                table=self.accountants,
                email=email,
                password=password,
                user_id=user_id
            )

    def _set_email_and_password_from_user(self, *, table, email, password, user_id):
        statement = sa.update(table).values(dict(
            email=email, password=password
        )).where(table.c.user_id == user_id)
        self.connection.execute(statement)
