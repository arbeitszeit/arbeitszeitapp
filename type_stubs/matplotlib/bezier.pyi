class NonIntersectingPathException(ValueError): ...

def get_intersection(cx1, cy1, cos_t1, sin_t1, cx2, cy2, cos_t2, sin_t2): ...
def get_normal_points(cx, cy, cos_t, sin_t, length): ...
def split_de_casteljau(beta, t): ...
def find_bezier_t_intersecting_with_closedpath(
    bezier_point_at_t,
    inside_closedpath,
    t0: float = 0.0,
    t1: float = 1.0,
    tolerance: float = 0.01,
): ...

class BezierSegment:
    def __init__(self, control_points) -> None: ...
    def __call__(self, t): ...
    def point_at_t(self, t): ...
    @property
    def control_points(self): ...
    @property
    def dimension(self): ...
    @property
    def degree(self): ...
    @property
    def polynomial_coefficients(self): ...
    def axis_aligned_extrema(self): ...

def split_bezier_intersecting_with_closedpath(
    bezier, inside_closedpath, tolerance: float = 0.01
): ...
def split_path_inout(
    path, inside, tolerance: float = 0.01, reorder_inout: bool = False
): ...
def inside_circle(cx, cy, r): ...
def get_cos_sin(x0, y0, x1, y1): ...
def check_if_parallel(dx1, dy1, dx2, dy2, tolerance: float = 1e-05): ...
def get_parallels(bezier2, width): ...
def find_control_points(c1x, c1y, mmx, mmy, c2x, c2y): ...
def make_wedged_bezier2(
    bezier2, width, w1: float = 1.0, wm: float = 0.5, w2: float = 0.0
): ...
