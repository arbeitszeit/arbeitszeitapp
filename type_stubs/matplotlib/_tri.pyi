import numpy

class TrapezoidMapTriFinder:
    def __init__(self, triangulation: Triangulation) -> None: ...
    def find_many(self, arg0: numpy.ndarray[numpy.float64], arg1: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.int32]: ...
    def get_tree_stats(self) -> list: ...
    def initialize(self) -> None: ...
    def print_tree(self) -> None: ...

class TriContourGenerator:
    def __init__(self, triangulation: Triangulation, z: numpy.ndarray[numpy.float64]) -> None: ...
    def create_contour(self, arg0: float) -> tuple: ...
    def create_filled_contour(self, arg0: float, arg1: float) -> tuple: ...

class Triangulation:
    def __init__(self, x: numpy.ndarray[numpy.float64], y: numpy.ndarray[numpy.float64], triangles: numpy.ndarray[numpy.int32], mask: numpy.ndarray[bool], edges: numpy.ndarray[numpy.int32], neighbors: numpy.ndarray[numpy.int32], correct_triangle_orientations: bool) -> None: ...
    def calculate_plane_coefficients(self, arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    def get_edges(self) -> numpy.ndarray[numpy.int32]: ...
    def get_neighbors(self) -> numpy.ndarray[numpy.int32]: ...
    def set_mask(self, arg0: numpy.ndarray[bool]) -> None: ...
