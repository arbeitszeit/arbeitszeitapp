from _typeshed import Incomplete
from datetime import datetime
from typing import Callable, Dict, Optional

class OptionalStringField:
    name: Incomplete
    value: Incomplete
    normalize: Incomplete
    def __init__(self, name: str, normalize: Callable[[str], str] = ...) -> None: ...
    def set_field_name(self, name: str) -> None: ...
    def parse_value(self, form: Dict[str, str]) -> None: ...
    def get_value(self) -> Optional[str]: ...

class OptionalDatetimeField:
    name: Incomplete
    value: Incomplete
    def __init__(self, name: str) -> None: ...
    def set_field_name(self, name: str) -> None: ...
    def parse_value(self, form: Dict[str, str]) -> None: ...
    def get_value(self) -> Optional[datetime]: ...

class FilterFormData:
    name: Optional[str]
    method: Optional[str]
    requested_after: Optional[datetime]
    requested_before: Optional[datetime]
    sorted_by: Optional[str]
    @classmethod
    def parse_from_from(self, args: Dict[str, str]) -> FilterFormData: ...
    def __init__(self, name, method, requested_after, requested_before, sorted_by) -> None: ...
