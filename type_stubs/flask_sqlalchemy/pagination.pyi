import typing as t
from _typeshed import Incomplete

class Pagination:
    page: Incomplete
    per_page: Incomplete
    max_per_page: Incomplete
    items: Incomplete
    total: Incomplete
    def __init__(self, page: int | None = ..., per_page: int | None = ..., max_per_page: int | None = ..., error_out: bool = ..., count: bool = ..., **kwargs: t.Any) -> None: ...
    @property
    def first(self) -> int: ...
    @property
    def last(self) -> int: ...
    @property
    def pages(self) -> int: ...
    @property
    def has_prev(self) -> bool: ...
    @property
    def prev_num(self) -> int | None: ...
    def prev(self, *, error_out: bool = ...) -> Pagination: ...
    @property
    def has_next(self) -> bool: ...
    @property
    def next_num(self) -> int | None: ...
    def next(self, *, error_out: bool = ...) -> Pagination: ...
    def iter_pages(self, *, left_edge: int = ..., left_current: int = ..., right_current: int = ..., right_edge: int = ...) -> t.Iterator[int | None]: ...
    def __iter__(self) -> t.Iterator[t.Any]: ...

class SelectPagination(Pagination): ...
class QueryPagination(Pagination): ...
