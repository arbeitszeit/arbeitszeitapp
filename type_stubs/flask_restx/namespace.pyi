from typing import NamedTuple

from _typeshed import Incomplete

from ._http import HTTPStatus as HTTPStatus
from .errors import abort as abort
from .marshalling import marshal as marshal
from .marshalling import marshal_with as marshal_with
from .model import Model as Model
from .model import OrderedModel as OrderedModel
from .model import SchemaModel as SchemaModel
from .reqparse import RequestParser as RequestParser
from .utils import merge as merge

class ResourceRoute(NamedTuple):
    resource: Incomplete
    urls: Incomplete
    route_doc: Incomplete
    kwargs: Incomplete

class Namespace:
    name: Incomplete
    description: Incomplete
    models: Incomplete
    urls: Incomplete
    decorators: Incomplete
    resources: Incomplete
    error_handlers: Incomplete
    default_error_handler: Incomplete
    authorizations: Incomplete
    ordered: Incomplete
    apis: Incomplete
    logger: Incomplete
    def __init__(
        self,
        name,
        description: Incomplete | None = None,
        path: Incomplete | None = None,
        decorators: Incomplete | None = None,
        validate: Incomplete | None = None,
        authorizations: Incomplete | None = None,
        ordered: bool = False,
        **kwargs,
    ) -> None: ...
    @property
    def path(self): ...
    def add_resource(self, resource, *urls, **kwargs) -> None: ...
    def route(self, *urls, **kwargs): ...
    def doc(self, shortcut: Incomplete | None = None, **kwargs): ...
    def hide(self, func): ...
    def abort(self, *args, **kwargs) -> None: ...
    def add_model(self, name, definition): ...
    def model(
        self,
        name: Incomplete | None = None,
        model: Incomplete | None = None,
        mask: Incomplete | None = None,
        strict: bool = False,
        **kwargs,
    ): ...
    def schema_model(
        self, name: Incomplete | None = None, schema: Incomplete | None = None
    ): ...
    def extend(self, name, parent, fields): ...
    def clone(self, name, *specs): ...
    def inherit(self, name, *specs): ...
    def expect(self, *inputs, **kwargs): ...
    def parser(self): ...
    def as_list(self, field): ...
    def marshal_with(
        self,
        fields,
        as_list: bool = False,
        code=...,
        description: Incomplete | None = None,
        **kwargs,
    ): ...
    def marshal_list_with(self, fields, **kwargs): ...
    def marshal(self, *args, **kwargs): ...
    def errorhandler(self, exception): ...
    def param(
        self, name, description: Incomplete | None = None, _in: str = "query", **kwargs
    ): ...
    def response(
        self, code, description, model: Incomplete | None = None, **kwargs
    ): ...
    def header(self, name, description: Incomplete | None = None, **kwargs): ...
    def produces(self, mimetypes): ...
    def deprecated(self, func): ...
    def vendor(self, *args, **kwargs): ...
    @property
    def payload(self): ...

def unshortcut_params_description(data) -> None: ...
def handle_deprecations(doc) -> None: ...
