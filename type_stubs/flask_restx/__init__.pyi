from typing import Any, Callable, Dict, Optional

class Namespace:
    def __init__(self, name: str, description: Optional[str] = None) -> None: ...
    def add_resource(self, resource, *urls, **kwargs): ...
    def route(self, *urls, **kwargs): ...
    def add_model(self, name: str, definition: Any) -> Any: ...
    def model(self, name: str, model: Dict[str, Any]) -> Any: ...
    def marshal_with(self, model: Any, skip_none: bool): ...
    @property
    def models(self) -> Dict[str, Any]: ...
    def expect(self, parser: Any): ...
    @property
    def error_handlers(self) -> Dict[Any, Callable]: ...

class Api:
    def __init__(self, app, title, version, description, doc, decorators) -> None: ...
    def add_namespace(self, ns, path=None): ...
    def errorhandler(self, exception: Any): ...

class Resource: ...

class Model(dict):
    def __init__(self, name: str): ...
    def __getitem__(self, key: str): ...
    @property
    def name(self) -> str: ...

def abort(code: int, message: Optional[str] = None): ...
